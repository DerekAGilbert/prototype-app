{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/derekgilbert/code/test/prototype-app/app.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/derekgilbert/code/test/prototype-app/app.vue","mtime":1535751910000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":1535660930000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nimport api_key from './config'\nimport config from './firebaseconfig'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nfirebase.initializeApp(config);\n\nconst db = firebase.firestore();\ndb.settings({ timestampsInSnapshots: true }); \n\nexport default {\n    data () {\n        return {\n            title: 'Digital Media URL Generator',\n            url: '',\n            link: false,\n            key: api_key.secret,\n            itemsArray: [],\n            shortURl: '',\n            api: 'https://digitalmedia.page.link/?link=',\n            isLoading: false,\n            errorMessages: {},\n        }\n    },\n    methods: {\n        generateUrl () {\n            this.shortURl = ''\n            this.isLoading = true            \n            const requesteObject = { longDynamicLink: this.api + this.url} \n            axios({\n            method: 'post',\n            url: `https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=${this.key}`,\n            data: requesteObject\n            }).then(res => {                \n                this.isLoading = false\n                this.shortURl = res.data.shortLink\n                this.storeData(this.url, this.shortURl)\n                this.getdata()\n            })\n             .catch(err => {\n                this.isLoading = false\n                console.log(err);\n            }) \n       },\n       getdata () {\n          db.collection(\"links\").get().then(function(querySnapshot) {\n                querySnapshot.forEach(function(doc) {\n                    console.log(doc.id, \" => \", doc.data());\n                    });\n                });\n       },\n       storeData (oldUrl, newUrl) {\n            db.collection(\"links\").add({\n                linkBefore: oldUrl,\n                LinkAfter: newUrl\n                })\n                .then(function() {\n                console.log(\"Document successfully written!\");\n             })\n       },\n    },\n    mounted () {   \n        this.getdata()\n    }\n}\n",{"version":3,"sources":["app.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.vue","sourceRoot":".","sourcesContent":["<template>\n    <div class=\"template-wrapper\">\n        <h1 class=\"short-title\">{{ title }}</h1>\n        <div class=\"container\">\n            <div class=\"action-wrapper\">\n                <input class=\"short-input\" placeholder=\"Place your url here ...\" v-model=\"url\">\n                <div id=\"loading-bar-spinner\" class=\"spinner\"><div v-show=\"isLoading\" class=\"spinner-icon\"></div></div>\n                <a class=\"short-link\" v-if=\"shortURl\" :href=\"shortURl\" target=\"_blank\"> {{shortURl}}</a>\n                <button :disabled=\"isLoading\" class=\"short-button\" @click=\"generateUrl()\">Create Dynamic Url</button>\n            </div>\n        </div>\n        <div v-if=\"itemsArray\" v-for=\"item in itemsArray\" :key=\"item.id\"> {{item}}</div>\n    </div>\n</template>\n<script>\nimport axios from 'axios'\nimport api_key from './config'\nimport config from './firebaseconfig'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nfirebase.initializeApp(config);\n\nconst db = firebase.firestore();\ndb.settings({ timestampsInSnapshots: true }); \n\nexport default {\n    data () {\n        return {\n            title: 'Digital Media URL Generator',\n            url: '',\n            link: false,\n            key: api_key.secret,\n            itemsArray: [],\n            shortURl: '',\n            api: 'https://digitalmedia.page.link/?link=',\n            isLoading: false,\n            errorMessages: {},\n        }\n    },\n    methods: {\n        generateUrl () {\n            this.shortURl = ''\n            this.isLoading = true            \n            const requesteObject = { longDynamicLink: this.api + this.url} \n            axios({\n            method: 'post',\n            url: `https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=${this.key}`,\n            data: requesteObject\n            }).then(res => {                \n                this.isLoading = false\n                this.shortURl = res.data.shortLink\n                this.storeData(this.url, this.shortURl)\n                this.getdata()\n            })\n             .catch(err => {\n                this.isLoading = false\n                console.log(err);\n            }) \n       },\n       getdata () {\n          db.collection(\"links\").get().then(function(querySnapshot) {\n                querySnapshot.forEach(function(doc) {\n                    console.log(doc.id, \" => \", doc.data());\n                    });\n                });\n       },\n       storeData (oldUrl, newUrl) {\n            db.collection(\"links\").add({\n                linkBefore: oldUrl,\n                LinkAfter: newUrl\n                })\n                .then(function() {\n                console.log(\"Document successfully written!\");\n             })\n       },\n    },\n    mounted () {   \n        this.getdata()\n    }\n}\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css?family=Ubuntu');\n\n.template-wrapper {\n    background-color: #4D5061;\n    height: 100%;\n    width: 100%;\n    margin: 0px;\n    padding: 0px;\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n}\n.container { \n    width: 100%;\n    max-width: 650px;\n    height: 275px;\n    border-radius: 4px;\n    background-color: #E9EDDE;\n    align-self: center;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, .5);\n\n\n}\n.action-wrapper {\n    display: flex;\n    height: 100%;\n    flex-direction: column;\n    align-content: center;\n    justify-content: space-between;\n    padding: 0px 0px;\n    margin: 0px 0px;\n}\n.short-title {\n    color: white;\n    font-family: 'Ubuntu', sans-serif;\n    align-self: center;\n}\n.short-input {\n    text-align: center;\n    font-family: 'Ubuntu', sans-serif;\n    border-radius: 5px;\n    font-size: 16px;\n    padding: 3px 0px;\n    margin: 10px 15px;\n    outline: none;\n    height: 30px;\n    border: white;\n}\n.short-input:focus {\n    box-shadow: 0 0 5px #E7E247;\n    border: 0.6px solid #E7E247;\n}\n.short-button {\n    font-family: 'Ubuntu', sans-serif;\n    font-weight: 300;\n    font-size: 16px;\n    cursor: pointer;\n    border-radius: 5px;\n    padding: 10px 0px;\n    margin: 10px 15px;\n    outline: none;\n    background-color: #5C80BC;\n    color: white;\n    border: none;\n}\n.short-button:hover {\n    outline: none;\n    transition: all 0.3s ease 0s;\n    transform: scale(0.9);\n    background-color: #476391;\n}\n.short-link {\n    text-decoration: none;\n    color: #5C80BC;\n    align-self: center;\n}\n.short-link:hover {\n    align-self: center;\n    color: #476391;\n\n}\n#loading-bar-spinner.spinner {\n    align-self: center;\n    left: 50%;\n    margin-left: -20px;\n    top: 50%;\n    margin-top: -20px;\n    position: absolute;\n    z-index: 19 !important;\n    animation: loading-bar-spinner 400ms linear infinite;\n}\n\n#loading-bar-spinner.spinner .spinner-icon {\n    width: 40px;\n    height: 40px;\n    border:  solid 4px transparent;\n    border-top-color:  #E7E247 !important;\n    border-left-color: #E7E247 !important;\n    border-radius: 50%;\n}\n\n@keyframes loading-bar-spinner {\n  0%   { transform: rotate(0deg);   transform: rotate(0deg); }\n  100% { transform: rotate(360deg); transform: rotate(360deg); }\n}\n</style>"]}]}